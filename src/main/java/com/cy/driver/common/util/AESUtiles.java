package com.cy.driver.common.util;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;

public class AESUtiles {

    static final String algorithmStr = "AES/ECB/PKCS5Padding";

    private static final Object TAG = "AES";

    static private KeyGenerator keyGen;

    static private Cipher cipher;

    static boolean isInited = false;

    private static  void init() {
        try {
            /**为指定算法生成一个 KeyGenerator 对象。
             *此类提供（对称）密钥生成器的功能。
             *密钥生成器是使用此类的某个 getInstance 类方法构造的。
             *KeyGenerator 对象可重复使用，也就是说，在生成密钥后，
             *可以重复使用同一 KeyGenerator 对象来生成进一步的密钥。
             *生成密钥的方式有两种：与算法无关的方式，以及特定于算法的方式。
             *两者之间的惟一不同是对象的初始化：
             *与算法无关的初始化
             *所有密钥生成器都具有密钥长度 和随机源 的概念。
             *此 KeyGenerator 类中有一个 init 方法，它可采用这两个通用概念的参数。
             *还有一个只带 keysize 参数的 init 方法，
             *它使用具有最高优先级的提供程序的 SecureRandom 实现作为随机源
             *（如果安装的提供程序都不提供 SecureRandom 实现，则使用系统提供的随机源）。
             *此 KeyGenerator 类还提供一个只带随机源参数的 inti 方法。
             *因为调用上述与算法无关的 init 方法时未指定其他参数，
             *所以由提供程序决定如何处理将与每个密钥相关的特定于算法的参数（如果有）。
             *特定于算法的初始化
             *在已经存在特定于算法的参数集的情况下，
             *有两个具有 AlgorithmParameterSpec 参数的 init 方法。
             *其中一个方法还有一个 SecureRandom 参数，
             *而另一个方法将已安装的高优先级提供程序的 SecureRandom 实现用作随机源
             *（或者作为系统提供的随机源，如果安装的提供程序都不提供 SecureRandom 实现）。
             *如果客户端没有显式地初始化 KeyGenerator（通过调用 init 方法），
             *每个提供程序必须提供（和记录）默认初始化。
             */
            keyGen = KeyGenerator.getInstance("AES");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        // 初始化此密钥生成器，使其具有确定的密钥长度。
        keyGen.init(128); //128位的AES加密
        try {
            // 生成一个实现指定转换的 Cipher 对象。
            cipher = Cipher.getInstance(algorithmStr);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        }
        //标识已经初始化过了的字段
        isInited = true;
    }

    private static byte[] genKey() {
        if (!isInited) {
            init();
        }
        //首先 生成一个密钥(SecretKey),
        //然后,通过这个秘钥,返回基本编码格式的密钥，如果此密钥不支持编码，则返回 null。
        return keyGen.generateKey().getEncoded();
    }

    private static byte[] encrypt(byte[] content, byte[] keyBytes) {
        byte[] encryptedText = null;
        if (!isInited) {
            init();
        }
        /**
         *类 SecretKeySpec
         *可以使用此类来根据一个字节数组构造一个 SecretKey，
         *而无须通过一个（基于 provider 的）SecretKeyFactory。
         *此类仅对能表示为一个字节数组并且没有任何与之相关联的钥参数的原始密钥有用
         *构造方法根据给定的字节数组构造一个密钥。
         *此构造方法不检查给定的字节数组是否指定了一个算法的密钥。
         */
        Key key = new SecretKeySpec(keyBytes, "AES");
        try {
            // 用密钥初始化此 cipher。
            cipher.init(Cipher.ENCRYPT_MODE, key);
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        }
        try {
            //按单部分操作加密或解密数据，或者结束一个多部分操作。(不知道神马意思)
            encryptedText = cipher.doFinal(content);
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return encryptedText;
    }

    private static byte[] encrypt(String content, String password) {
        try {
            byte[] keyStr = getKey(password);
            SecretKeySpec key = new SecretKeySpec(keyStr, "AES");
            Cipher cipher = Cipher.getInstance(algorithmStr);//algorithmStr
            byte[] byteContent = content.getBytes("utf-8");
            cipher.init(Cipher.ENCRYPT_MODE, key);//   ʼ
            byte[] result = cipher.doFinal(byteContent);
            return result; //
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static byte[] decrypt(byte[] content, String password) {
        try {
            byte[] keyStr = getKey(password);
            SecretKeySpec key = new SecretKeySpec(keyStr, "AES");
            Cipher cipher = Cipher.getInstance(algorithmStr);//algorithmStr
            cipher.init(Cipher.DECRYPT_MODE, key);//
            byte[] result = cipher.doFinal(content);
            return result; //
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static byte[] getKey(String password) {
        byte[] rByte = null;
        if (password!=null) {
            rByte = password.getBytes();
        }else{
            rByte = new byte[24];
        }
        return rByte;
    }

    /**
     * 将二进制转换成16进制
     * @param buf
     * @return
     */
    public static String parseByte2HexStr(byte buf[]) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < buf.length; i++) {
            String hex = Integer.toHexString(buf[i] & 0xFF);
            if (hex.length() == 1) {
                hex = '0' + hex;
            }
            sb.append(hex.toUpperCase());
        }
        return sb.toString();
    }

    /**
     * 将16进制转换为二进制
     * @param hexStr
     * @return
     */
    public static byte[] parseHexStr2Byte(String hexStr) {
        if (hexStr.length() < 1)
            return null;
        byte[] result = new byte[hexStr.length() / 2];
        for (int i = 0; i < hexStr.length() / 2; i++) {
            int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
            int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2),
                    16);
            result[i] = (byte) (high * 16 + low);
        }
        return result;
    }

    //注意: 这里的password(秘钥必须是16位的)
    private static final String keyBytes = "abcdefgabcdefg12";

    /**
     *加密
     */
    public static String encode(String content){
        //加密之后的字节数组,转成16进制的字符串形式输出
        return parseByte2HexStr(encrypt(content, keyBytes));
    }

    /**
     *解密
     */
    public static String decode(String content){
        //解密之前,先将输入的字符串按照16进制转成二进制的字节数组,作为待解密的内容输入
        byte[] b = decrypt(parseHexStr2Byte(content), keyBytes);
        return new String(b);
    }

    //1登录接口
    public static void loginUser(){
        //加密
        String lj1 = "{'loginName':'lj0001','password':'000000'}";
        String lj2 = "{'loginName':'lj0002','password':'000000'}";

        System.out.println("加密前："+encode(lj1 ));
        //返回值解密
        System.out.println("sc0001解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F7083D4A3632C332DC62CFC153405BAE33C9C1C93499A7CE82B0BEF142D024966A4744E46761FAC59208132BC5D25CEB6E5F61DF777606E4392D176A063EE90B3DFEF1615583847453595436ABCB0B218976015306613CB648BFFC27EBEFF7A8083135C43AC2434877DD4CB0C01AF27002A1B417FE4D4E10AE9287501D6D9492BC94F564C06D02F086147CDE590FE8745830FE60989B815A5664A285DF4F7245B83EE412657E149C2E511C00626887C686709DBBA2FE24EA6A3EF94D9B48B3C68AE4F1C1745F42C87FF8FD75CFFC72005D21BC1AF1DD4BB44C402F38514CDF9FAD2521DDF5475E5D6176E95EEA13A6C0CCB6"));
    }

    //2揽件扫描跳转到订单详细页面
    public static void getOrderFromInfoByCode(){

        //加密
        String jmqxx = "{'userId':63,'orderFromCode':'15000049616','type':'0'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "35A86027098F0037B459915106D9CF5290423A5AE90C94D4EA92DE752929C69A3F370EE1737631B4B99ED1C5FF59D277";

        //返回值解密
        System.out.println("解密后："+decode

    }

    //3查询订单信息
    public static void getSurfaceInfoById(){
        //加密
        String jmqxx = "{'userId':63,'id':145}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "5612F3E69BC8C53E9ADBF113FB16D846E44C3BF41599C83D7B3CCD2AF95BAC15";

        //返回值解密
        System.out.println("解密后："+decode

    }

    //4揽件扫描
    public static void updatePadScanning(){
        //加密{type=0, orderFromCode=0, surfaceCode=15000049616, userId=120}
        //{"type":"0","orderFromCode":"0","surfaceCode":"15000014462","userId":"129"}
        String jmqxx = "{'userId':129,'orderFromCode':'0','surfaceCode':'15000014462','type':'0'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "35A86027098F0037B459915106D9CF5290423A5AE90C94D4EA92DE752929C69ACD34FC984C01B9E03C136214504117C096B250B489CD4DC983EE3ED7217514D4";

        //返回值解密
        System.out.println("解密后："+decode
    }

    //5待揽件列表
    public static void queryOrderFromListPagef() {
        //加密
        String jmqxx = "{'userId':125,'curPageNo':1,'pageSize':10}";

        System.out.println("加密前：" + encode(jmqxx));
        String jmqxx

        //返回值解密
        System.out.println("解密后：" + decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F708651FD80577E9FDB877FEFD16AB43F37DC1C93499A7CE82B0BEF142D024966A4739E6F73F4349444496EAAD21AC83913B164AD8B1F0EADA27174CDA88135D5FF5FC14D1C3EF480E2AC2C77A9AFC42BB5A726013446F5E20C51796EED9346AB1154918907527587087B0B1D8081213341DCB1DE5B5405A9E85CFCFFBEE6B46E32ECE32823D7396C87B488B281BE53C271C510DCE353A6AD80EBFB8C49C5F66349964109A72B06A0F0A06E95912CE48DB9DE828909CF35C3481CD55230F3A1C4914F9D668EC9995B5EE892E153EA093CA53E8F812F01565985474A66994CE6AEE4D9603C6AB038E04529136A8901640849CA27EE470AC659EF7188E4E30BAD31A939563BB8283C403AF61B36E18CE10EAD392A08A6597FC3EF06BBFEA3800CA8CA49B1650DC4C0B44EB4E6921ED7A06160FC7FCE566F09AD6A999820282FE3E39C5D982CE36A286470E87802E169C6B9D7FCCA02B6FCAD41E3DCC357C598993D3C42FFAC6AC702D653EE451E06D16D02D991FDE0BA428B44462350A6799160FB6401C8D4D059F2E08333407515D1F12041ADE07D9BD5D5ACB5AD933A9B61CF0FB8E466C55B683257F68D48CFC629934124640EC2C750E275B8A491491E1445CA16716305466BE7FD7A4A7F7262C464A6D089EEF4F3A8FB4A5FDC51B0022326B7225E13D9B8B753198654E15B4986626AC246C8348F96CF161EDC1C44E8816630FCC78D96F284836E9EECDA0EBDDC1224B02B029EED2FFFD7D2107D7670AEA795A4298F1003F3503EEB3490DF5A3AB8B84676F390BF4185288E1DF7EB6A64A00DF863453F080E31AE10BBEC836006BB306C9147F45AC1A1E32B74C87041632E510900B0F1A6C45FE3A2D2465E6DA1D4A0D542F9FC3B7BEA121C410DFB31D91ED2627BC25943ACEF25E08C16B31586855C25A6CA95B51288B1DE17FC83ED63D3D219943B66C9A750EF3929F680DF72D5F994AD289DF32AE197AD12E6E002385BD33D4617749587E9A336498A66515B2C6C36F53AB4E827168353D24D4BD5FD65D07DE1CAD910BF06D5E7E2D6E9A99FE7B3693DF041319BB3C1A30B935FD1AFEE6585AC78BC0188429E3B4B28CC271E89971B6599132256ED50CBF29882044A995984B6212C78660A4A2ABABAF5D211BDF27A25DCC32AFD8667B5E0F3DF1EBFF462A2DA27EE470AC659EF7188E4E30BAD31A939563BB8283C403AF61B36E18CE10EAD32333379ED42611A945FA5DFBAC420B0C9B1650DC4C0B44EB4E6921ED7A06160FEA37FB9421EF965C7478626B5939B3C7B7644D35C171AFE046C2CD0C79CDC9BBAADB6FD34DB281809E9D143C58A72D951CD8FA7EF9CB23AE312B54F10DF59B49ECF28C1A638D35F78D40030D74EF78E2156B88386BF26E208B42DB07942037114B45FFF163836099FA6F79DAB1FA975B15F24F8AC62E7F702C2EB6523C74891E5AB8CC2073B994E880EA03F70F04032EFF583C5A374CD5640422066DB419FBF01A5B7B9D5D7605A312F53906FBBED861A307138A159B5E18B9A5AC9C05F324F567E07B7C42CE604DE88702C276AFFD846138AD0363B1B0A6C829728918E3C8ED432462903B6D8979D85CF1158E7C7CC526267CE5552872AD1921D1A25BA9D62D078847C66B3E46105CA7E36AB410ECF939D64546EA82BB5E8EAEFFB69FCEDC1AD8C82348FC52025D62810575854693858360AC4A3110F6630DCE11730A3D7382B8D0BCE497F1B4EB0AC71D1BD5D9832FBAEF87F0A56B439ABE2A94C60E921CDA56716850924AE76D96054BCE57CD8077B953221D4B9C7671FEE7F124E395EC3427F661E16FBDB8D224467401CD072147C01D54E9510629C9102CFA4C2CF1F527B18042A4CFDBD043D88DCAC0B0D169AD2B199F0CCE30153FB6B6E25E7269210910D805FFB1DFCD9F7D239A9CE4D5F0878AE8020A355BB4BD1729E8380A76768527E372B5D6E8653695ACDD24420BC6CD887E080D1FF4CBC750126272E7494D54D6324D3E890BD9BFE77CDB27F1EBD192617354EA0207559994A2DDE8CD75512E91464D0822405F1431FB53DB13EF424C25DFA70FCDDE59EFD0D07C24E7FE1BB2A07A7F26A82257DFEE958633C2107D3FF3314B185EAC03D6F661EC9C31D701525CDAA8733A11253DFD45D9933FB517A9CB83B7D0A029A7252922356B1BB1479F1C484B68CA5FB8D2D623D968149D0129983C400B82244BFDEAFD68DF0E46A7FFF1664D5E9C279A0109AE8D9DC242EEDF8F3629A6A5E1BB1B989BB705338CA627303A25E690753D3301B480253473E19F8DA294A9BD67C1663D3315C872B0D307297C84E80D252FA709116CD827E52296CAA2E88B7BE217DE84737ABA1CFBE6A5AB38805A02606F1A8E9AB01F40A043694E6D86C885B93AA7337BB1FA4E10D1FBC6AFAFAABCE9FD1AEB976EB272DD31EF69ACBD75E878BB453823C1F05D55AA86C720B59576B3585EDCDC13229AC34C2140DE9A124FE5FC48EF42938DE9544640B23ADF120759483C35E2285D4689342EAF38BC950C75A156FFFC624370E8223E71CAD3B586B69F506854A8B93B99D61AA5E1AFC4131CEB69D82ADD9D4DB3607BBAD57DC09D9C816046B9F37C09CBA95B04E78FBFB42CAE5A15C04CD0DBE21ED3F6F215272741E85B7148B9B51DB899CAB1294462237A730250370ED6384FFD9D3C628830BF4D0A2791522F10A5354C19FF6986953C136203C30515518FB29CE508EC75A1823DA4B875D539EA342BFBD3DE033D71CAC92DC3EBF23901506DD977F760A2CC118A75CF21D796271584D3F988FC4087D755BA9960F0619171DCF0E0F168779E45ADEA7658C827864399493F63B58E4A3E25E3CD52B26F3204FE92325A8E284A5DE7EFBDFAC377B185172C6DBA819796D2E310FB4C42ED85C7166CECE4CAA54D2AC128F6D4856772D7743C14B5ADD30C5C047994D3EA4B52DC6AAA102DBF8DBA58D02BAA97D1EE1C695FA9107B35098DBA907CF2EDCC93BC55E3B713C64CDEB45D242385F58333E5C178B7CFC5E88EC88DFAA085E1B7224F8D137663B70DE8D7D771CD848119ED855D3A7F16CA28FCE29D1EC085169B8D235AF2BE60303A25E690753D3301B480253473E19F8DA294A9BD67C1663D3315C872B0D307297C84E80D252FA709116CD827E52296CAA2E88B7BE217DE84737ABA1CFBE6A5AB38805A02606F1A8E9AB01F40A043694E6D86C885B93AA7337BB1FA4E10D1FBC6AFAFAABCE9FD1AEB976EB272DD31EFAC358C3A3B9DE338C9C9910A908B86BEF5B7CB7DC048455FBA1C835C75D5DAA5249A6ABEE5D4586CBFDFABDEFAC7BC86FE92F11D67F4908BBFA14A404208744DCB91D9ECD782C1D2FA9841E6ED610D270C2563386718AB0545EEE65CCA34D70EC659148DCCADDB9B52633F3B9A3FE52CDEB5CDD19CF86AB8156383A44BE50C99007CB6A22E23130CE94BEDC0D4A0BC161326471EA010338BCED25B11C76AFEBDCE4FB0804962631603F1094BA9159C75D4CD1AC5BD305DB960E70F7D295AA1FC8FF3F5853E4D3F48EF76AFAD82866630C38E2D98A62E7AB0019454C31A56397F89649DA4B04ADE11E052AC48E87225B82DE88DA51CBFE60C69CBA1DAB3E916C9389515AB3AB1AFE574297E25E023C89FC11B237617B1BEA0C810EA16BB8A29E5D081B3ACF1B4D0BD7884F25DE3F2C363ECD8D2FD88D79FFFFCCDCF4CC57E3BA10B0F1A6C45FE3A2D2465E6DA1D4A0D54DF5035042B1E58292E9716B99E59C9EB3CB3550832EB4F1F67F47A89649C5BCDB46420DA9D75EAD1BFFDB35471A9F1AA91C4B298B790D7101F92E7BE1E09C1AA04CBAAEC94650B92CC8953E2EC55E3C8E75CC1AF1D21491B44F20BEC65174EAB7B439CF8077B18A328A8F856AA9CA9FA1E208033F1E3072DC11FFB12226137BFCEC7A58F490270E79AF025DBF9E3F5DBD2D6D1A2A2F42CFA565A4023EFB5F52BF42DA04C1139868490D6EF01B1A7A7A4DAC5A15ED7EA9647DBB64F9C32C1CD8F786EF53C992E53E83D28469E95369A2A3844178FA8D77C490BC2CDB79B6B2FD3B6E246CF254D1FC9EFF09908B1C6F3DB4E25E7A26F23DC31BE2A8C8E213247D50F661A499F1BD4138422BB3D292AF4032D1EBDF95465961FC9928E24FEA2EF7FF1B04782119824367A55A5A0AFC9B070249A6ABEE5D4586CBFDFABDEFAC7BC86FE92F11D67F4908BBFA14A404208744DCB91D9ECD782C1D2FA9841E6ED610D270C2563386718AB0545EEE65CCA34D70EC659148DCCADDB9B52633F3B9A3FE52CDEB5CDD19CF86AB8156383A44BE50C99007CB6A22E23130CE94BEDC0D4A0BC161326471EA010338BCED25B11C76AFEBD3E90832F7F28D0841625F3997822434ED4CD1AC5BD305DB960E70F7D295AA1FC8FF3F5853E4D3F48EF76AFAD82866630C38E2D98A62E7AB0019454C31A56397F6F53269A55050C9A19F4B44BDD2B384449E46A553204597CE99CBF1280CFA4AE"));
    }
    //6已揽收订单列表
    public static void queryOrderFromListPaget() {
        //加密
        String jmqxx = "{'userId':63,'curPageNo':1,'pageSize':10}";

        System.out.println("加密前：" + encode(jmqxx));
        String jmqxxT = "19BF166C86AB48733788AEDC78BBC31468D138C6D451D896F1EF9E3C54247E0C95F948F03F20F53496083001FD976CE7";

        //返回值解密
        System.out.println("解密后：" + decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70817475304C6E1584F2698D45B18170AE552A9B44C8511B83A211C34CA61BACF730D3C63E6B9C7D33EB9A76746168E692A7677C784A05C89244661894BB2FE9B8B"));
    }
    //7确认运费
    public static void confirTransportAmount(){
        //加密
        String jmqxx = "{'userId':125,'orderFromId':456,'transportAmount':20}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "D9C505BD46F57E0B72C9E8C5EAE9368F6764FBF9621E7CEFA418B9B3782303BE6C45FD04620C663BE26E0EA73204D26B78CF72F9E9B76FD3E19A586CCE94B5A0";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70817475304C6E1584F2698D45B18170AE552A9B44C8511B83A211C34CA61BACF730D3C63E6B9C7D33EB9A76746168E692A7677C784A05C89244661894BB2FE9B8B"));


    }

    //8装车绑定
    public static void addHoldsInfo() {
        //加密
        String jmqxx = "{'userId':172,'carNumber':'浙AU0L13','mobilephone':'13606500114'}";

        System.out.println("加密前：" + encode(jmqxx));
        String jmqxxT = "7C1773729B624280C322D45D3E2C3FDBD6DC0BC80D4007A4DD3A2B175F6B5507E5CD3DB735F73546D0B90BC377AA57045CB7C3F9F27EADEE5A51A75CA38B8F244D08FD767305344E1D10290870E48980";

        //返回值解密
        System.out.println("解密后：" + decode("C088195C79A158842A86F7939DAA22171CFDFFFF0F7EC8158B77CDFF9EDCC7DE79DBE34F83FFE42DEF738C2C7A1BD3CB9572F5F262E128C2B4AF22FFF263E18BDB98FAC3F1D4FC8FBEDCE0659E9A38D3"));

    }
    //9装车扫描
    public static void loadHoldsDetailedInfo(){
        //加密
        String jmqxx = "{'userId':190,'surfaceCode':'15000049717','holdsCode':'YS2015070604000001','type':'0'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "9D8140402025EB2D9BA9D3E0A13E0D9C90423A5AE90C94D4EA92DE752929C69A675DA5B9FD3D461E308FD02582865A24971297D75ED51E941299A93B59607A45EF62A2BA503BF06A63D6F0DD51DDB013F1F412676D6DD188BF970F665BD4CC94";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F7089D99020D0F2F6F75D817D7B2578D1BF7AA86E16C392D20C200BF3CCA67E71CFE0D3C63E6B9C7D33EB9A76746168E692A7677C784A05C89244661894BB2FE9B8B"));

    }

    //10装车确认
    public static void updateHoldsInfo(){
        //加密
        String jmqxx = "{'userId':190,'holdsCode':'YS2015070604000001','type':'0'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "3D09878146D88406353DE43493FEE4B0E2D568BCA62CC584DB97E189C71FE06D024E70DAA80F4DD78E2039033C9BE2AED54F33FF0CC7231C75FD5F7C513A029B";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70832552E4D6021ACC5FBBA8C07AC53E348EF3815FC9AF09665560DA313A106D2000D3C63E6B9C7D33EB9A76746168E692A7677C784A05C89244661894BB2FE9B8B"));

    }

    //11根据运单编号查询返回运单对象
    public static void queryHoldsInfoByHoldsCode(){
        //加密
        String jmqxx = "{'userId':48,'holdsCode':'YS20150521021533000001'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "3D09878146D88406353DE43493FEE4B0E2D568BCA62CC584DB97E189C71FE06D16EC5C9374435EC6686FCF09222EBCDF4D08FD767305344E1D10290870E48980";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F7087DAF851DECD4CDAA1B6F976EBBFA24473F942E8A5CDA590F4CC565EA16AC4196DB3174291BACA32E6DC251EFEB922D6CD6008E88521C8979F1473DC09C3EE693BF32F6D3692F1551D87685A45508ACBB53E6CF8E35A5504167ABDF90462583699118A13D506B6F32EEBDA56900A3AE1A5E057728637AA154AB5060626AF5F4CC65A90DDCFE0637F8AEA8FD67C0072BC6A4A5DE965698CA5EFB37E368A0ECABED2502B09001FD31505370C4858D492F7DBC56D8ABF234F7370CE4D87A99069359E3CF2335B96C7099E322326B1ECAC5AAAC8248759FE9EC26E3B59887CFBCE6D803A335B7ACDA765825862FFAD121605307820504F7BB27BD624E90328746BFBD2849CE854CE8310C6BDC2F6F4E1AEA33"));

    }

    //12取消装车面单
    public static void deleteHoldsDetailedInfoState(){
        //加密
        String jmqxx = "{'userId':48,'surfaceCode':'203777488671'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "9D8140402025EB2D9BA9D3E0A13E0D9C90423A5AE90C94D4EA92DE752929C69A51FB104F5B48C7B1196C5E99D8FE3071";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70892A1BD1C602DCC859E3A4BAC0E4B9E8DA40D5C7030F17517351EC232B14911CFDB3174291BACA32E6DC251EFEB922D6C2E467F92998E2DB1D5B4BE2967A3B6CA"));

    }

    //13卸货绑定
    public static void saveUnloadingCargo(){
        //加密
        String jmqxx = "{'userId':50}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "043DB098A6E819C7672B3CD26E5CC607";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F708784C0CD8C1854415449073581E2518BD8A8048CEBB8917C5A8C6001308D418D5B7FA2E1520537804D4C33861694F2150550B528DCCD8D84E87DC385BDDFD246F19EFA7616C3EC98B8B21434960C9482C44F2EE1D3D990B8A6F913A05A49FCA6E6C4E3E7CE59369A3D773EFEF8BA5AAAA34D231E76F3D79BA48096FACBC9D4AAC4D623EF5AFEB4A8F8A5BDED01D6ADA8ED109E7CC6504740C04BCCA15B96FA7493CFD30A4659BEC2B337AE6DF17D6989021DDF5475E5D6176E95EEA13A6C0CCB6"));

    }

    //14卸货扫描
    public static void unloadingCargoScanning(){
        //加密
        String jmqxx = "{'userId':181,'meshCargoCode':'XH2015070110000004','surfaceCode':'1500004971800050002'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "B390CB4D2C50B63806F36179176C5E9C64FAF41AD0EEDD9458744FEDEE1A81F34DDE31845A7AC6C1A1A8386CFA1D31819829B30010F6B5B9CBFA58A685111C615267C298BFD44AEFAFC3B6578EA67BF1363D1057848525E4727F6AAB5462D91A";

        //返回值解密
        System.out.println("解密后："+decode("22106E3262CE76456847F008B2325794690E8EEB0E164EE870776A519869194F3A351CBDDA53D4B37B444817D823E97847A00504B8C12D292A3C8AFB763E5DA96DBEF5ED66DF5069DCB80A14FC0EE627"));

    }

    //15卸货完成确认
    public static void unloadingCargoConfirmation(){
        //加密
        String jmqxx = "{'userId':'50','meshCargoCode':'XH20150518030021000001','type':'0'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "CE11E232DE31E22EFD6A9F21F5653C4C842E7C21404ABA84F604170D35EF06907CCE89E3097F0C371B2BEDF0FF798D998653A48703B275E951730483497617209EA29D4C30A9E580A96965C2539554A7";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E88F57BB4400E183A7494F0DC86B5FD2B615D2D7D601D1317790814EEBDC6ADB506D4438B2DFB964B8CADA72AD865493D6A68E44A6E666C4DE5097DE310ACB9320C32C1F8FA39132CED1160A19E12172FBA519201F77ADA19C0FB21DD4EBA0237FDE48D644FCDED1E026A0E82BD746E6C59709C043770A2024F5758FAD4AC4A8E98B57E7FCBDE1C3BF93E384A600D6FA9DC696C518750D6B161EAE535467B001FBDF6CD7D55AB1035D69449AFBD62694F9DBBA2FE24EA6A3EF94D9B48B3C68AE4F9D668EC9995B5EE892E153EA093CA53C5F9048F6D436AE5B4774479229FB5C2CF0307381610224BA9A9E4A4B1E734AF7563BF280AF96A09025AF99D3271F6EAE3798E60C1D77831CE7799A8727B7AC6D7551221012765D693982195BF629C2D2CD66EA50CE711CF99B4A4C0904B63541E5A14E80D29DB9A27B662D74E8AEC6A2397D7D4D506759E75472A1B9357F287D5839323A0EC8556172DA002B96EC223765A8CA96C7FAB6CBBA4812B0E4B916474FD31A4DAB3E875719638B097CD6C88875396DA2A04ADC7A387B8EE1C089765FC0523C489FDEA46A581563407F9A02EF1D15922A0E174377A06C94E06E5A478CC76BF025B030675C51E5EBF3859C914F9D5D9383288E1A0BB1FE0218A9BB07EB51C566B496782BDA3BA4AC0FF2AAF4DE759619D05C02A5B8FD61671D20F4276BEEDFA8BBBFD7EBC274D390F186B211360D4526FB18ACA8665F448476147D8AFC6B8315150D33DE6961807ED45D654690B0F1A6C45FE3A2D2465E6DA1D4A0D54EA7C7F1C56347F0A3935191CB3A4BCE2BC25943ACEF25E08C16B31586855C25AE41F53F61CB446456F2718068634F4461BB0ECBD9AC49471F5AB318DD3038B67D289DF32AE197AD12E6E002385BD33D4617749587E9A336498A66515B2C6C36F510DCE353A6AD80EBFB8C49C5F663499BE70944EDBE64934DC1FE3E2BAA01C31A84DAF8F3368198D8BCA7B2F0ABA4908076F729912769A6FBE02B31F99CCFDF63455D21FAB0D672B381A64C42074BFC89E89DEA74954488591CAD387E4263AB599D8EA6EFF4BAFD4ADAB22D129583D331F9F24DE76A045B3EC7DD0F99B0700868388E4DEA8A5032333098F090398637A6894DF35D173527E3D085674A6F13508172BA91E77E066676E0F786CDED3876017CB3E6DC7C37039E76D3DCF4AB61F6D509A2DAEC427E9CD96720B92F2B14F41E648DABC05C48B7E684F172FBEE8669427B7D4832B361A88BEE83DC357F626FD5746C39B362FBDEEF1D8AED3A4160C4A4D4625160DCAEB7A534D6BC7879CB1ACF70E88122C99FD616B57D0D3518EB6AA5145E0B20CECC3660DABCAE5E89F1AADC986380AE8BD7CDC5926A0FB1E99C1DD3ACE1B45BA91EB4E4842C87F4E6846908FE66A5FC01EDAB657E5AFA232DBFA0337A4A5DBB336909B3489FBE123D245A9C24328255506E33CA48539601221D1BACB294A57891EF2F12E498A6FE4D9E37286BD22AD3AD81C78CA889F2C28F10F93FBDD30D52D8D558540159C562D007A0E007C4124EF6E8DB397DAA0BA4507C38813DB6A16AB609176190ED53CA1AE21194CE39A5924BEFECC6EC8CA78CD77B1FBE548A8726A8DEE743B487C1952F6A3E39086CB6FA17B88F0EF7727EAC8A4B949F6C68C7924E0E8443AA4381B91AC98292DE8F962208594D663CA26584942D231F61F42CB1BB5FE29CA62452624EDA39EEC240C457E9832F60A69CE854A9CC98C79AEBC7FEC2B9EBA12443B00956D26F1893334189F5EC1D103A6EDDF42E7523658DE999A94E7750C1FDC667DD6BF6A165A4F424E39C6A13C72B23E67D2867A18C26C0B71F9A6C996A95ED3C3447EAA02B9D1F7BC98A9BC1A508BBDB8AAA64ED176AA658990EBA04DA9586F22EF96DB94277ABC564BB6A1B7E68969A2340EFF6145C9EEA88A858EFC38F35DF2B25B44957D509E20C0CCFBEF35893188A8C400C58DC25EDAFD0E0AD859E04DA607129FC91DB494558DA021D5BB7120E60DA7BE214F62ABEAFF2F32030C84C5390F1D5A8BACC2E3FB4FC7B0409545BB773379A755C25F213494460DDF3B4A572093DC1A681438B73B9DB96BBE4A40533AFC006FCFF42BD700F791646E1B0C9F41107821843ADEC1823364147D14B7853F36CAA6416B3521025DA32D9034A257AF7F26A911"));
        String jmqxxS = "";
    }

    //16取消面单下车
    public static void cancellationSurfaceCode(){
        //加密
        String jmqxx = "{'userId':50,'surfaceCode':'203777488671'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "3DDDACA51F1D0E919AE4CD864D57B95890423A5AE90C94D4EA92DE752929C69A51FB104F5B48C7B1196C5E99D8FE3071";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70892A1BD1C602DCC859E3A4BAC0E4B9E8DB281E0ED11E65F2848BDFB97CD473507DB3174291BACA32E6DC251EFEB922D6C2E467F92998E2DB1D5B4BE2967A3B6CA"));
        String jmqxxS = "";
    }

    //17取消卸货单
    public static void cancellantionUnloadingCargo(){
        //加密
        String jmqxx = "{'userId':48,'surfaceCode':'203777488671'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "9D8140402025EB2D9BA9D3E0A13E0D9C90423A5AE90C94D4EA92DE752929C69A51FB104F5B48C7B1196C5E99D8FE3071";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70892A1BD1C602DCC859E3A4BAC0E4B9E8DA40D5C7030F17517351EC232B14911CFDB3174291BACA32E6DC251EFEB922D6C2E467F92998E2DB1D5B4BE2967A3B6CA"));
        String jmqxxS = "";
    }


    //18配送装车绑定
    public static void allocationHoldsInfo(){
        //加密
        String jmqxx = "{'userId':48,'mobilephone':'18958061971'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "877B3FDF9040B23657F2323B8DAF35E206BBA2359A74640B4389A66F4EA768284173403D814E00F7BE422998F2DF09D6";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F708BC206C6C59697C8CAD7C503B40378F3066053917385DEA13D833EBA8E8370546A678A3110DFEBD422752E86FFD712359448A47FADCE659913D7D90C7E88AA85C4C3B6F5EE962CA441C5A5A0B59766C94487DA7CC9BCE2656C3DB4F7F9757D132B9ED252DD53BFB58109DD0E0BB39175FC1C655F109AB8677DB8CC43BEF56D21F2BF94C9165CF35ED79DEBDB8BE36012FD3C47ADA4AC4B5BDFDE07739ECEF1B61D9C1B9EF8EA05EC3955CD8F15587BFD0B8E856AA41A3C21DE6E2033D4AE5FBEA2397D7D4D506759E75472A1B9357F287E7709D4BB97A4861985081AD0EA5263922E4E692811B8251B917BA1422461DAB"));

    }

    //19配送装车扫描
    public static void allocationHoldsDetailedInfo(){
        //加密
        String jmqxx = "{'userId':181,'holdsCode':'YS2015070107000010','surfaceCode':'15000049677'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "80891B77280F9CEDE4728DA80365EBAAE2D568BCA62CC584DB97E189C71FE06D3C3CAB198C233FED63EC92E32728D8FC3A535D387FB0F2AD6FF333ABE4D39EF121FC92890E91E077EA39631253AF4A08";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70892A1BD1C602DCC859E3A4BAC0E4B9E8DA40D5C7030F17517351EC232B14911CFDB3174291BACA32E6DC251EFEB922D6C2E467F92998E2DB1D5B4BE2967A3B6CA"));
        String jmqxxS = "";
    }

    //20配送装车确认
    public static void updateAllocationHoldsInfo(){
        //加密
        String jmqxx = "{'userId':48,'surfaceCode':'203777488671'}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "9D8140402025EB2D9BA9D3E0A13E0D9C90423A5AE90C94D4EA92DE752929C69A51FB104F5B48C7B1196C5E99D8FE3071";

        //返回值解密
        System.out.println("解密后："+decode("858A14C83FE78918AE5C68F593A1859E8DA81CBB925D91B379BA96F1FEF9F70892A1BD1C602DCC859E3A4BAC0E4B9E8DA40D5C7030F17517351EC232B14911CFDB3174291BACA32E6DC251EFEB922D6C2E467F92998E2DB1D5B4BE2967A3B6CA"));

    }

    //21获取PDA物流公司下的车辆司机信息
    public static void getDriverCarInfo(){
        //加密
        String jmqxx = "{'userId':65}";

        System.out.println("加密前："+encode(jmqxx ));
        String jmqxxT = "9D8140402025EB2D9BA9D3E0A13E0D9C90423A5AE90C94D4EA92DE752929C69A51FB104F5B48C7B1196C5E99D8FE3071";

        //返回值解密
        System.out.println("解密后："+decode

    }


    public static void main(String[] args) {
        //1登录接口
        //loginUser();
        //2揽件扫描跳转到订单详细页面
        //getOrderFromInfoByCode();
        //3查询订单信息
        //getSurfaceInfoById();
        //4揽件扫描
        updatePadScanning();
        //5待揽件列表
        //queryOrderFromListPagef();
        //6已揽收订单列表
        //queryOrderFromListPaget();
        //7确认运费
        //confirTransportAmount();
        //8装车绑定
        //addHoldsInfo();
        //9装车扫描
        //loadHoldsDetailedInfo();
        //10装车确认
        //updateHoldsInfo();
        //11根据运单编号查询返回运单对象
        //queryHoldsInfoByHoldsCode();
        //12取消装车面单
        //deleteHoldsDetailedInfoState();
        //13卸货绑定
        //saveUnloadingCargo();
        //14卸货扫描
        //unloadingCargoScanning();
        //15卸货完成确认
        //unloadingCargoConfirmation();
        //16取消面单下车
        //cancellationSurfaceCode();
        //18配送装车绑定
        //allocationHoldsInfo();
        //19配送装车扫描
        //allocationHoldsDetailedInfo();
        //21获取PDA物流公司下的车辆司机信息
        //getDriverCarInfo();
    }
}
